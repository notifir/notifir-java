/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.5/samples
 */

plugins {
  id 'java'
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'jacoco'
  id 'fr.brouillard.oss.gradle.jgitver' version '0.9.1'
  id 'io.codearte.nexus-staging' version '0.30.0'
}

repositories {
  mavenCentral()
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

jgitver {
  strategy 'MAVEN'
  nonQualifierBranches 'main'
  useDirty true
}

buildScan {
  termsOfServiceUrl = 'https://gradle.com/terms-of-service'
  termsOfServiceAgree = 'yes'
}

ext {
  okhttpVersion = '5.3.0'
  jacksonVersion = '2.20.0'
  hamcrestVersion = '3.0'
}

dependencies {
  implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
  implementation "com.squareup.okhttp3:logging-interceptor:${okhttpVersion}"
  implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
  implementation "org.apache.commons:commons-lang3:3.19.0"

  compileOnly 'org.projectlombok:lombok:1.18.42'
  annotationProcessor 'org.projectlombok:lombok:1.18.42'

  testCompileOnly 'org.projectlombok:lombok:1.18.42'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.42'

  testImplementation "org.mockito:mockito-core:5.20.0"
  testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"
  testImplementation "org.hamcrest:hamcrest-core:${hamcrestVersion}"
  testImplementation "org.hamcrest:hamcrest-library:${hamcrestVersion}"
  testImplementation "junit:junit:4.13.2"
}

jar {
  manifest {
    attributes('Implementation-Title': 'notifir')
  }
}

task sourceJar(type: Jar) {
  description 'Packages up the source in a Jar for Maven publishing'
  from sourceSets.main.allJava
  from sourceSets.main.resources
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  description 'Packages up the javadoc in a Jar for Maven publishing'
  from javadoc.destinationDir
}

artifacts {
  archives jar, sourceJar, javadocJar
}

publishing {
  repositories {
    maven {
      name = "OSSRH"
      if (project.hasProperty("release")) {
        url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
      } else {
        url 'https://s01.oss.sonatype.org/content/repositories/snapshots'
      }
      credentials {
        username = System.getenv("OSSRH_USERNAME")
        password = System.getenv("OSSRH_TOKEN")
      }
    }
    maven {
      name = "GitHubPackages"
      url = "https://maven.pkg.github.com/notifir/notifir-java"
      credentials {
        username = System.getenv("GITHUB_ACTOR")
        password = System.getenv("GITHUB_TOKEN")
      }
    }
  }

  publications {
    maven(MavenPublication) {
      groupId = "io.github.notifir"
      artifactId = "notifir"

      artifact jar

      artifact sourceJar {
        classifier "sources"
      }

      artifact javadocJar {
        classifier "javadoc"
      }

      pom {
        name = "notifir"
        description = "Java client library for Notifir"
        url = "https://github.com/notifir/notifir-java"
        packaging = 'jar'
        licenses {
          license {
            name = 'MIT License'
            url = 'http://www.opensource.org/licenses/mit-license.php'
          }
        }
        developers {
          developer {
            id = "titenkov"
            name = "Pavel Titenkov"
            email = "pavel@titenkov.com"
          }
          developer {
            id = "katyaterletskaya"
            name = "Katya Kuzmenchuk"
            email = "kuzmenchukkatya@gmail.com"
          }
        }
        scm {
          connection = "scm:git:https://github.com/notifir/notifir-java.git"
          developerConnection = "scm:git:https://github.com/notifir/notifir-java.git"
          url = "https://github.com/notifir/notifir-java"
        }
      }
    }
  }
}

signing {
  useGpgCmd()
  sign publishing.publications.maven
}

nexusStaging {
  serverUrl = "https://s01.oss.sonatype.org/service/local/"
  packageGroup = "io.github.notifir"
  username = System.getenv('OSSRH_USERNAME')
  password = System.getenv('OSSRH_TOKEN')
}

tasks.test {
  finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
  reports {
    xml.required.set(true)
  }
}
